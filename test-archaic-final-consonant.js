/**
 * Test archaic initial consonants with final consonants
 */

// Simulate the conversion functions
const COMPATIBILITY_TO_HANGUL_JAMO_INITIAL = {
  [String.fromCharCode(0x317F)]: String.fromCharCode(0x1140), // „Öø ‚Üí ·ÖÄ
  [String.fromCharCode(0x3180)]: String.fromCharCode(0x1147), // „ÜÄ ‚Üí ·Öá
  [String.fromCharCode(0x3181)]: String.fromCharCode(0x114C), // „ÜÅ ‚Üí ·Öå
  [String.fromCharCode(0xA97C)]: String.fromCharCode(0xA97C), // Í•º ‚Üí Í•º
  [String.fromCharCode(0x3178)]: String.fromCharCode(0x112B), // „Ö∏ ‚Üí ·Ñ´
  [String.fromCharCode(0x3171)]: String.fromCharCode(0x111D), // „Ö± ‚Üí ·Ñù
}

const COMPATIBILITY_TO_HANGUL_JAMO_MEDIAL = {
  [String.fromCharCode(0x3157)]: String.fromCharCode(0x1169), // „Öó ‚Üí ·Ö©
  [String.fromCharCode(0x314F)]: String.fromCharCode(0x1161), // „Öè ‚Üí ·Ö°
  [String.fromCharCode(0x3153)]: String.fromCharCode(0x1165), // „Öì ‚Üí ·Ö•
  [String.fromCharCode(0x3163)]: String.fromCharCode(0x1175), // „Ö£ ‚Üí ·Öµ
  [String.fromCharCode(0x315C)]: String.fromCharCode(0x116E), // „Öú ‚Üí ·ÖÆ
  [String.fromCharCode(0x3161)]: String.fromCharCode(0x1173), // „Ö° ‚Üí ·Ö≥
}

const COMPATIBILITY_TO_HANGUL_JAMO_FINAL = {
  [String.fromCharCode(0x3139)]: String.fromCharCode(0x11AF), // „Ñπ ‚Üí ·ÜØ
  [String.fromCharCode(0x3134)]: String.fromCharCode(0x11AB), // „Ñ¥ ‚Üí ·Ü´
  [String.fromCharCode(0x3141)]: String.fromCharCode(0x11B7), // „ÖÅ ‚Üí ·Ü∑
  [String.fromCharCode(0x3131)]: String.fromCharCode(0x11A8), // „Ñ± ‚Üí ·Ü®
  [String.fromCharCode(0x3145)]: String.fromCharCode(0x11BA), // „ÖÖ ‚Üí ·Ü∫
  [String.fromCharCode(0x3147)]: String.fromCharCode(0x11BC), // „Öá ‚Üí ·Üº
}

function convertToHangulJamoInitial(char) {
  return COMPATIBILITY_TO_HANGUL_JAMO_INITIAL[char] || char;
}

function convertToHangulJamoMedial(char) {
  return COMPATIBILITY_TO_HANGUL_JAMO_MEDIAL[char] || char;
}

function convertToHangulJamoFinal(char) {
  return COMPATIBILITY_TO_HANGUL_JAMO_FINAL[char] || char;
}

// Simulate the composition logic
function composeSyllable(initial, medial, final = '') {
  // Convert Compatibility Jamo to Hangul Jamo first
  const convertedInitial = convertToHangulJamoInitial(initial);
  const convertedMedial = convertToHangulJamoMedial(medial);
  const convertedFinal = final ? convertToHangulJamoFinal(final) : '';
  
  // Get Unicode codes
  const initialCode = convertedInitial.charCodeAt(0);
  const medialCode = convertedMedial.charCodeAt(0);
  const finalCode = convertedFinal ? convertedFinal.charCodeAt(0) : null;
  
  console.log(`üî§ composeSyllable called with: { initial: "${initial}", medial: "${medial}", final: "${final}" }`);
  console.log(`   Converted to: { initial: "${convertedInitial}", medial: "${convertedMedial}", final: "${convertedFinal}" }`);
  console.log(`   Unicode codes: { initialCode: ${initialCode}, medialCode: ${medialCode}, finalCode: ${finalCode} }`);
  
  // Validate that the initial consonant is in a valid range for composition
  // Only standard modern Korean initials (0x1100-0x1112) can be composed into single syllable blocks
  // Archaic initials (0x1113-0x1159) and special characters (0xA97C) must remain as separate characters
  if (initialCode < 0x1100 || initialCode > 0x1112) {
    console.log(`   ‚ùå Initial consonant outside standard composition range: ${initialCode}, returning as separate characters`);
    return initial + medial + final;
  }
  
  console.log('   ‚úÖ Initial consonant in valid range, proceeding with composition');
  
  // Base syllable: Í∞Ä (0xAC00)
  const base = 0xAC00;
  const initialOffset = (initialCode - 0x1100) * 21 * 28;
  const medialOffset = (medialCode - 0x1161) * 28;
  const finalOffset = finalCode ? (finalCode - 0x11A8 + 1) : 0;
  
  console.log('   üìä Composition calculation:');
  console.log(`     base: ${base} (0xAC00)`);
  console.log(`     initialOffset: ${initialOffset} ((initialCode - 0x1100) * 21 * 28)`);
  console.log(`     medialOffset: ${medialOffset} ((medialCode - 0x1161) * 28)`);
  console.log(`     finalOffset: ${finalOffset} ${finalCode ? '(finalCode - 0x11A8 + 1)' : '0'}`);
  
  const syllableCode = base + initialOffset + medialOffset + finalOffset;
  const result = String.fromCharCode(syllableCode);
  console.log(`   üéØ Composed syllable: ${result} code: ${syllableCode} (0x${syllableCode.toString(16)})`);
  
  return result;
}

console.log('üß™ Testing Archaic Initial Consonants with Final Consonants\n');

// Test cases for archaic initials with final consonants
const testCases = [
  { input: { initial: '„Öø', medial: '„Öó', final: '„Ñπ' }, description: 'Archaic initial „Öø + „Öó + „Ñπ' },
  { input: { initial: '„ÜÄ', medial: '„Öè', final: '„Ñ¥' }, description: 'Archaic initial „ÜÄ + „Öè + „Ñ¥' },
  { input: { initial: '„ÜÅ', medial: '„Öì', final: '„ÖÅ' }, description: 'Archaic initial „ÜÅ + „Öì + „ÖÅ' },
  { input: { initial: 'Í•º', medial: '„Ö£', final: '„Ñ±' }, description: 'Archaic initial Í•º + „Ö£ + „Ñ±' },
  { input: { initial: '„Ö∏', medial: '„Öú', final: '„ÖÖ' }, description: 'Archaic initial „Ö∏ + „Öú + „ÖÖ' },
  { input: { initial: '„Ö±', medial: '„Ö°', final: '„Öá' }, description: 'Archaic initial „Ö± + „Ö° + „Öá' },
]

for (const testCase of testCases) {
  console.log(`\n${'='.repeat(60)}`);
  console.log(`Test: ${testCase.description}`);
  console.log(`Input: ${testCase.input.initial} + ${testCase.input.medial} + ${testCase.input.final}`);
  
  const result = composeSyllable(testCase.input.initial, testCase.input.medial, testCase.input.final);
  
  console.log(`Result: "${result}"`);
  
  // Check if the result is correct for archaic jamo
  if (result.length === 1) {
    console.log('‚úÖ SUCCESS: Composed into single syllable block (modern Korean)');
  } else {
    console.log('‚úÖ SUCCESS: Returned as separate characters (correct for archaic jamo)');
  }
}

console.log('\n' + '='.repeat(60));
console.log('‚úÖ Test complete!');
