/**
 * Korean Syllable Composition
 * Handles syllable composition, complex medials, and complex finals
 */

import { 
  ARCHAIC_COMPLEX_MEDIAL_MAPPINGS
} from './unicode.js'

/**
 * Compose Korean syllable as Hangul Jamo sequence
 * Simplified approach: always return Hangul Jamo sequences and let browser render as blocks
 * @param initial - Initial consonant
 * @param medial - Medial vowel
 * @param final - Final consonant (optional)
 * @returns Hangul Jamo sequence that browser will render as syllable block
 */
export function composeSyllable(initial: string, medial: string, final: string = ''): string {
  // Handle edge cases
  if (!initial && !medial && !final) return ''
  if (!initial && !medial) return final
  if (!initial && !final) return medial
  if (!medial && !final) return initial
  
  console.log('üî§ composeSyllable (simplified) called with:', { initial, medial, final })
  
  // Simply concatenate the components - browser will render as syllable block
  // This works for both modern and archaic Korean characters
  const result = initial + medial + final
  console.log('   üéØ Returning Hangul Jamo sequence:', result, '(browser will render as block)')
  
  return result
}

/**
 * Check if two vowels can form a complex medial (diphthong)
 * @param first - First vowel
 * @param second - Second vowel
 * @returns Complex medial character or null if not combinable
 */
export function canFormComplexMedial(first: string, second: string): string | null {
  console.log(`üîç canFormComplexMedial called with: "${first}" + "${second}"`)
  
  // Check for archaic complex medials first („Üç + vowel combinations)
  const archaicCombination = first + second
  const archaicResult = ARCHAIC_COMPLEX_MEDIAL_MAPPINGS[archaicCombination]
  if (archaicResult) {
    console.log(`üèõÔ∏è Archaic complex medial formed: "${first}" + "${second}" = "${archaicResult}"`)
    return archaicResult
  }
  
  // Check for modern complex medials
  const complexMedials: { [key: string]: string } = {
    [String.fromCharCode(0x1169) + String.fromCharCode(0x314F)]: '„Öò',  // „Öó + „Öè = „Öò (using actual decomposition chars)
    [String.fromCharCode(0x1169) + String.fromCharCode(0x3150)]: '„Öô',  // „Öó + „Öê = „Öô
    [String.fromCharCode(0x1169) + String.fromCharCode(0x3163)]: '„Öö',  // „Öó + „Ö£ = „Öö
    [String.fromCharCode(0x116C) + String.fromCharCode(0x314E)]: '„Öù',  // „Öú + „Öì = „Öù
    [String.fromCharCode(0x116C) + String.fromCharCode(0x3151)]: '„Öû',  // „Öú + „Öî = „Öû
    [String.fromCharCode(0x116C) + String.fromCharCode(0x3163)]: '„Öü',  // „Öú + „Ö£ = „Öü
    [String.fromCharCode(0x1173) + String.fromCharCode(0x3163)]: '„Ö¢'   // „Ö° + „Ö£ = „Ö¢
  }
  
  const combination = first + second
  const result = complexMedials[combination]
  
  if (result) {
    console.log(`üîó Complex medial formed: "${first}" + "${second}" = "${result}"`)
  }
  
  return result || null
}

/**
 * Check if two consonants can form a complex final consonant
 * @param first - First consonant (current final)
 * @param second - Second consonant (new input)
 * @returns Complex final character or null if not combinable
 */
export function canFormComplexFinal(first: string, second: string): string | null {
  const complexFinals: { [key: string]: string } = {
    // moern complex finals
    [String.fromCharCode(0x11A8) + String.fromCharCode(0x3145)]: '·Ü™',  // „Ñ± + „ÖÖ = „Ñ≥ (using Compatibility Jamo)
    [String.fromCharCode(0x11AB) + String.fromCharCode(0x3148)]: '·Ü¨',  // „Ñ¥ + „Öà = „Ñµ
    [String.fromCharCode(0x11AB) + String.fromCharCode(0x314E)]: '·Ü≠',  // „Ñ¥ + „Öé = „Ñ∂
    [String.fromCharCode(0x11AF) + String.fromCharCode(0x3131)]: '·Ü∞',  // „Ñπ + „Ñ± = „Ñ∫
    [String.fromCharCode(0x11AF) + String.fromCharCode(0x3141)]: '·Ü±',  // „Ñπ + „ÖÅ = „Ñª
    [String.fromCharCode(0x11AF) + String.fromCharCode(0x3142)]: '·Ü≤',  // „Ñπ + „ÖÇ = „Ñº
    [String.fromCharCode(0x11AF) + String.fromCharCode(0x3145)]: '·Ü≥',  // „Ñπ + „ÖÖ = „ÑΩ
    [String.fromCharCode(0x11AF) + String.fromCharCode(0x314C)]: '·Ü¥',  // „Ñπ + „Öå = „Ñæ
    [String.fromCharCode(0x11AF) + String.fromCharCode(0x3147)]: '·Üµ',  // „Ñπ + „Öç = „Ñø
    [String.fromCharCode(0x11AF) + String.fromCharCode(0x314E)]: '·Ü∂',  // „Ñπ + „Öé = „ÖÄ
    [String.fromCharCode(0x11B8) + String.fromCharCode(0x3145)]: '·Üπ',  // „ÖÇ + „ÖÖ = „ÖÑ
  }
  
  const combination = first + second
  const result = complexFinals[combination]
  
  if (result) {
    console.log(`üîó Complex final formed: "${first}" + "${second}" = "${result}"`)
  }
  
  return result || null
}

// decomposeHangulSyllable function removed - no longer needed with simplified approach
